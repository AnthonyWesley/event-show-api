version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CORE_CONNECTION_SECRET_KEY=${CORE_CONNECTION_SECRET_KEY}
      - PLATFORM_CORE_URL=${PLATFORM_CORE_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - EVOLUTION_URL=${EVOLUTION_URL}
      - EVOLUTION_INSTANCE=${EVOLUTION_INSTANCE}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - PORT=3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coolify

  # Opcional: Adicione um banco de dados se necess√°rio
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_DB: eventflow
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - coolify

networks:
  coolify:
    external: true

# volumes:
#   postgres_data:
