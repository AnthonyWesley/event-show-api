generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  photo           String?
  photoPublicId   String?
  refreshToken String?
  createdAt DateTime @default(now())
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  name       String
  phone           String?
  photo           String?
  photoPublicId   String?
  role       UserRole  @default(ADMIN) 
  createdAt  DateTime  @default(now())
  refreshToken    String?
  companyId  String?
  company    Company?   @relation(fields: [companyId], references: [id])

  @@map("users")
}


model Company {
  id              String    @id @default(uuid())
  name            String
  cnpj            String?   @unique
  ie              String?
  phone           String?
  email           String?   @unique
  responsibleName String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  website         String?
  segment         String?
  notes           String?

  photo           String?
  photoPublicId   String?

  plan            Plan      @default(TEST)
  status          Status    @default(ACTIVE)
  accessExpiresAt DateTime?
  createdAt       DateTime  @default(now())
  invoice         Invoice[]
  subscription    Subscription[]
  users           User[]
  events          Event[]
  products        Product[]
  sellers         Seller[]
  pendingAction   PendingAction[]
  leads           Lead[]

  @@index([plan])
  @@map("companies")
}



model Product {
  id         String   @id @default(uuid())
  name       String
  price      Float
  photo      String?
  photoPublicId String?
  companyId  String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales      Sale[]
  leads      Lead[]    @relation("LeadProducts") 
  @@index([companyId])
}

model Event {
  id           String        @id @default(uuid())
  name         String
  photo        String?
  photoPublicId String?
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean       @default(true) 
  companyId    String
  goal         Float         @default(0.0)
  goalType     GoalType      @default(QUANTITY)
  createdAt    DateTime      @default(now())
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sellerEvents SellerEvent[] 
  sales        Sale[]
  leads        Lead[]    

  @@index([companyId])
  @@index([isActive])
  @@index([companyId, isActive])
}


model Lead {
  id              String     @id @default(uuid())
  name            String
  email           String?
  phone           String?
  customInterest  String?                
  notes           String?
  source          String     
  sellerId        String?    
  eventId         String
  companyId       String
  createdAt       DateTime   @default(now())

  event           Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  seller          Seller?    @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  products        Product[]  @relation("LeadProducts")

  @@index([eventId])
  @@index([companyId])
  @@index([sellerId])
}


model Seller {
  id        String        @id @default(uuid())
  name      String
  email     String        
  phone     String?
  photo     String?
  photoPublicId String?
  companyId String
  createdAt DateTime      @default(now())
  company   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales     Sale[]
  events    SellerEvent[] 
  leads        Lead[]    
  @@unique([companyId, email]) 
  @@index([companyId])
}

model SellerEvent {
  id        String   @id @default(uuid())
  sellerId  String
  eventId   String

  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([sellerId, eventId], name: "sellerId_eventId")
}

model Sale {
  id        String   @id @default(uuid())
  sellerId  String
  productId String
  eventId   String
  quantity  Int
  createdAt DateTime @default(now())

  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model PendingAction {
  id         String        @id @default(uuid())
  companyId  String
  eventId    String
  actionType ActionType
  targetId   String?
  sellerId   String
  payload    Json
  status     ActionStatus  @default(PENDING)
  createdAt  DateTime      @default(now())
  company    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Subscription {
  id           String   @id @default(uuid())
  companyId    String
  externalId   String   
  plan         Plan
  status       SubscriptionStatus
  startedAt    DateTime
  expiresAt    DateTime?
  canceledAt   DateTime?
  createdAt    DateTime @default(now())
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices     Invoice[]   @relation("SubscriptionInvoices")
}


model Invoice {
  id              String   @id @default(uuid())
  companyId       String
  subscriptionId  String?
  externalId      String
  amount          Float
  dueDate         DateTime
  paidAt          DateTime?
  status          InvoiceStatus
  createdAt       DateTime @default(now())

  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], name: "SubscriptionInvoices")
}


enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
  FAILED
}


enum ActionType {
  CREATE_SALE
  UPDATE_SALE
  DELETE_SALE
  // CREATE_SELLER
  // UPDATE_SELLER
  // DELETE_SELLER
  // OTHER
}

enum ActionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Plan {
  TEST
  BASIC
  PREMIUM
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum GoalType {
  QUANTITY
  VALUE
}

enum UserRole {
  ADMIN     
  MANAGER   
  GUEST   
}
