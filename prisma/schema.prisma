generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  photo          String?
  photoPublicId  String?
  refreshToken   String?
  createdAt      DateTime @default(now())
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String
  phone          String?
  photo          String?
  photoPublicId  String?
  role           UserRole  @default(ADMIN) 
  createdAt      DateTime  @default(now())
  refreshToken   String?
  companyId      String?
  company        Company?  @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Company {
  id              String    @id @default(uuid())
  name            String
  cnpj            String?   @unique
  ie              String?
  phone           String?
  email           String?   @unique
  responsibleName String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  website         String?
  segment         String?
  notes           String?
  isValueVisible  Boolean? @default(true)

  photo           String?
  photoPublicId   String?

  accessExpiresAt DateTime?
  status          Status    @default(ACTIVE)
  createdAt       DateTime  @default(now())
  platformId       String    // <- Define de qual plataforma essa empresa faz parte
  leadsCustomField   LeadCustomField[]
  invoice         Invoice[]
  subscriptions    Subscription[]
  users           User[]
  events          Event[]
  products        Product[]
  sellers         Seller[]
  sources         LeadSource[]
  pendingAction   PendingAction[]
  leads           Lead[]

  @@map("companies")
}

// model Address {
//   id         String   @id @default(uuid())
//   street     String?
//   number     String?
//   complement String?
//   neighborhood String?
//   city       String
//   state      String
//   zipCode    String
//   country    String?   @default("BR")
//   createdAt  DateTime  @default(now())

//   companyId  String
//   company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@index([companyId])
// }


model Subscription {
  id              String   @id @default(uuid())
  companyId       String
  externalId      String
  planId          String   
  status          SubscriptionStatus
  startedAt       DateTime
  expiresAt       DateTime?
  canceledAt      DateTime?
  createdAt       DateTime @default(now())

  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices        Invoice[] @relation("SubscriptionInvoices")
}

model Invoice {
  id              String   @id @default(uuid())
  companyId       String
  subscriptionId  String?
  externalId      String
  amount          Float
  dueDate         DateTime
  paidAt          DateTime?
  status          InvoiceStatus
  createdAt       DateTime @default(now())

  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], name: "SubscriptionInvoices")
}

model Product {
  id             String   @id @default(uuid())
  name           String
  price          Float
  photo          String?
  photoPublicId  String?
  companyId      String
  createdAt      DateTime @default(now())

  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales          Sale[]
  leads          Lead[]   @relation("LeadProducts")

  @@index([companyId])
}

model Event {
  id             String        @id @default(uuid())
  name           String
  photo          String?
  photoPublicId  String?
  startDate      DateTime
  endDate        DateTime?
  isSellerGoalCustom Boolean   @default(true) 
  isActive       Boolean       @default(true) 
  goal           Float         @default(0.0)
  goalType       GoalType      @default(QUANTITY)
  companyId      String
  createdAt      DateTime      @default(now())

  company        Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sellerEvents   SellerEvent[] 
  sales          Sale[]
  leads          Lead[]    
  invites        Invite[]
  @@index([companyId])
  @@index([isActive])
  @@index([companyId, isActive])
}

model Seller {
  id             String        @id @default(uuid())
  name           String
  email          String        
  phone          String?
  photo          String?
  photoPublicId  String?
  companyId      String
  createdAt      DateTime @default(now())

  company        Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales          Sale[]
  events         SellerEvent[] 
  leads          Lead[]    
  @@unique([companyId, email]) 
  @@index([companyId])
}

model Invite {
  id         String   @id @default(uuid())
  code       String   @unique
  sellerEventId     String
  eventId    String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  sellerEvent  SellerEvent   @relation(fields: [sellerEventId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}


model SellerEvent {
  id        String   @id @default(uuid())
  sellerId  String
  eventId   String
  goal      Float    @default(0.0) 
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  invites        Invite[]

  @@unique([sellerId, eventId], name: "sellerId_eventId")
}

model Sale {
  id        String   @id @default(uuid())
  sellerId  String
  productId String
  eventId   String
  leadId    String?
  quantity  Int
  createdAt DateTime @default(now())

  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  lead      Lead?    @relation("LeadSales", fields: [leadId], references: [id], onDelete: SetNull)
}

model LeadCustomField {
  id        String     @id @default(uuid())
  companyId String
  name      String
  key       String     // Chave única por empresa: "cpf", "birthDate"
  type      FieldType
  required  Boolean    @default(false)
  order     Int        @default(0)

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  values    LeadCustomValue[]

  @@unique([companyId, key])
  @@index([companyId])
}

model LeadCustomValue {
  id       String           @id @default(uuid())
  leadId   String
  fieldId  String
  value    String           // Valor sempre salvo como texto (pode ser "true", "2023-01-01", "123.45", etc.)

  lead     Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  field    LeadCustomField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([leadId, fieldId])
  @@index([leadId])
  @@index([fieldId])
}


model Lead {
  id             String     @id @default(uuid())
  name           String
  phone          String?
  customInterest String?
  notes          String?
  leadSourceId   String?     
  sellerId       String?
  eventId        String
  companyId      String
  createdAt      DateTime   @default(now())
  convertedAt    DateTime?

  status         LeadStatus         @default(NEW)
  wasPresent     Boolean            @default(false)
  customValues   LeadCustomValue[] // ✅ ligação com os campos personalizados

  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  company        Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  seller         Seller?    @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  products       Product[]  @relation("LeadProducts")
  leadSource     LeadSource? @relation(fields: [leadSourceId], references: [id])
  sales          Sale[]     @relation("LeadSales")

  @@index([eventId])
  @@index([companyId])
  @@index([sellerId])
  @@index([leadSourceId])
}

model LeadSource {
  id             String   @id @default(uuid())
  name           String
  photo          String?
  photoPublicId  String?
  description    String?
  createdAt      DateTime @default(now())
  companyId      String

  company        Company @relation(fields: [companyId], references: [id])
  leads          Lead[]  
}

model PendingAction {
  id          String       @id @default(uuid())
  companyId   String
  eventId     String
  actionType  ActionType
  targetId    String?
  sellerId    String
  payload     Json
  status      ActionStatus @default(PENDING)
  createdAt   DateTime     @default(now())

  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
  FAILED
}

enum ActionType {
  CREATE_SALE
  UPDATE_SALE
  DELETE_SALE
}

enum ActionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GoalType {
  QUANTITY
  VALUE
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum UserRole {
  ADMIN     
  MANAGER   
  GUEST   
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  DISCARDED
}

